/*
 * Gestão de Propostas
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InclusaoPrePropostaResponse;
import io.swagger.client.model.PreProposta;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrePropostaApi {
    private ApiClient apiClient;

    public PrePropostaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrePropostaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for prePropostasPost
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param preProposta Pré-Proposta a ser analisada, cujo resultado, quando aprovada é uma proposta. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call prePropostasPostCall(String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, PreProposta preProposta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = preProposta;

        // create path and map variables
        String localVarPath = "/pre-propostas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));
        if (xAuthorization != null)
        localVarHeaderParams.put("x-authorization", apiClient.parameterToString(xAuthorization));
        if (codigoLoja != null)
        localVarHeaderParams.put("codigoLoja", apiClient.parameterToString(codigoLoja));
        if (codigoLojista != null)
        localVarHeaderParams.put("codigoLojista", apiClient.parameterToString(codigoLojista));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call prePropostasPostValidateBeforeCall(String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, PreProposta preProposta, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling prePropostasPost(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling prePropostasPost(Async)");
        }
        
        // verify the required parameter 'xAuthorization' is set
        if (xAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xAuthorization' when calling prePropostasPost(Async)");
        }
        
        // verify the required parameter 'codigoLoja' is set
        if (codigoLoja == null) {
            throw new ApiException("Missing the required parameter 'codigoLoja' when calling prePropostasPost(Async)");
        }
        
        // verify the required parameter 'codigoLojista' is set
        if (codigoLojista == null) {
            throw new ApiException("Missing the required parameter 'codigoLojista' when calling prePropostasPost(Async)");
        }
        
        // verify the required parameter 'preProposta' is set
        if (preProposta == null) {
            throw new ApiException("Missing the required parameter 'preProposta' when calling prePropostasPost(Async)");
        }
        

        com.squareup.okhttp.Call call = prePropostasPostCall(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, preProposta, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Esta API tem o objetivo de incluir uma análise de dados sobre uma pré-proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo. Caso seja aprovada, uma proposta será incluída.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param preProposta Pré-Proposta a ser analisada, cujo resultado, quando aprovada é uma proposta. (required)
     * @return InclusaoPrePropostaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InclusaoPrePropostaResponse prePropostasPost(String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, PreProposta preProposta) throws ApiException {
        ApiResponse<InclusaoPrePropostaResponse> resp = prePropostasPostWithHttpInfo(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, preProposta);
        return resp.getData();
    }

    /**
     * 
     * Esta API tem o objetivo de incluir uma análise de dados sobre uma pré-proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo. Caso seja aprovada, uma proposta será incluída.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param preProposta Pré-Proposta a ser analisada, cujo resultado, quando aprovada é uma proposta. (required)
     * @return ApiResponse&lt;InclusaoPrePropostaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InclusaoPrePropostaResponse> prePropostasPostWithHttpInfo(String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, PreProposta preProposta) throws ApiException {
        com.squareup.okhttp.Call call = prePropostasPostValidateBeforeCall(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, preProposta, null, null);
        Type localVarReturnType = new TypeToken<InclusaoPrePropostaResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Esta API tem o objetivo de incluir uma análise de dados sobre uma pré-proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo. Caso seja aprovada, uma proposta será incluída.
     * @param clientId Client ID disponibilizado na criação da App. (required)
     * @param accessToken Access Token com permissões de acesso. (required)
     * @param xAuthorization base64 do codigoParceiro:codigoUsuario:senha. (required)
     * @param codigoLoja Código da loja (Filial). (fixo informada pela financeira). (required)
     * @param codigoLojista Código do lojista (Rede de loja). (fixo informada pela financeira). (required)
     * @param preProposta Pré-Proposta a ser analisada, cujo resultado, quando aprovada é uma proposta. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call prePropostasPostAsync(String clientId, String accessToken, byte[] xAuthorization, String codigoLoja, String codigoLojista, PreProposta preProposta, final ApiCallback<InclusaoPrePropostaResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = prePropostasPostValidateBeforeCall(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, preProposta, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InclusaoPrePropostaResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
